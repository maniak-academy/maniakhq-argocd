apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: foo
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log;
    pid /var/run/nginx.pid;

    events {
        worker_connections 1024;
    }

    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';
        access_log /var/log/nginx/access.log main;
        sendfile on;
        keepalive_timeout 65;

        server {
            listen 443 ssl;
            server_name www.maniak.lab;

            ssl_certificate /etc/nginx/ssl/tls.crt;
            ssl_certificate_key /etc/nginx/ssl/tls.key;

            location / {
                root /usr/share/nginx/html;
                index index.html index.htm;
            }

            error_page 500 502 503 504 /50x.html;
            location = /50x.html {
                root /usr/share/nginx/html;
            }
        }
    }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: exampleservice-deployment
  namespace: foo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: exampleservice
  template:
    metadata:
      labels:
        app: exampleservice
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        ports:
        - containerPort: 443
        volumeMounts:
        - name: config-volume
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: tls-volume
          mountPath: /etc/nginx/ssl
      volumes:
      - name: config-volume
        configMap:
          name: nginx-config
      - name: tls-volume
        secret:
          secretName: foo-tls

---
apiVersion: v1
kind: Service
metadata:
  name: exampleservice
  namespace: foo
spec:
  type: ClusterIP
  selector:
    app: exampleservice
  ports:
  - port: 443
    targetPort: 443

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: example-ingress
  namespace: foo
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"  # Use HTTPS if Argo CD is served over HTTPS
    nginx.ingress.kubernetes.io/ssl-passthrough: "true"  # Enable SSL passthrough to let Argo CD handle TLS termination
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - www.maniak.lab
    secretName: foo-tls
  rules:
  - host: www.maniak.lab
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: exampleservice
            port:
              number: 443
